<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Chat - Real-time Messaging</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
        integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<link rel="stylesheet" href="/css/personalChat.css">

<body>
    <div class="call-modal" id="call-modal">
        <div class="call-modal-content">
            <h2>üìû Incoming Call</h2>
            <p>
                <%= user2.fname %> is calling you...
            </p>
            <div class="call-modal-buttons">
                <button class="accept-call" id="accept-call" title="Accept Call">
                    <i class="fa-solid fa-phone"></i>
                </button>
                <button class="reject-call" id="reject-call" title="Reject Call">
                    <i class="fa-solid fa-phone-slash"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="video-container" id="video-section">
        <video id="your-call" autoplay playsinline muted></video>
        <video id="remote-video" autoplay playsinline></video>
    </div>

    <div class="call-controls" id="call-controls">
        <button class="end-call" id="end-call" title="End Call">
            <i class="fa-solid fa-phone-slash"></i>
        </button>
    </div>

    <div class="chat-window">
        <div class="header">
            <div class="about-receiver">
                <div class="user-avatar">
                    <%= user2.fname.charAt(0).toUpperCase() %>
                </div>
                <div class="user-info">
                    <h1>
                        <%= user2.fname %>
                    </h1>
                    <div class="user-status">
                        <div class="status-dot"></div>
                        <span id="connection-status">Connecting...</span>
                    </div>
                </div>
            </div>
            <div class="features">
                <button class="feature-btn" id="audio" title="Voice Call">
                    <i class="fa-solid fa-phone"></i>
                </button>
                <button class="feature-btn" id="video" title="Video Call">
                    <i class="fa-solid fa-video"></i>
                </button>
            </div>
        </div>

        <div class="chattings">
            <ul id="messages">
                <% sortedChats.slice().reverse().forEach((subChat) => { %>
                    <p>
                        <%= subChat[0].date %>
                    </p>
                    <% subChat.forEach((chat)=>{ %>
                        <li class="<%= chat.sender === user1.fname ? 'sent' : 'received' %>">
                            <strong>
                                <%= chat.sender %>
                            </strong>
                            <%= chat.content %>
                        </li>
                        <% }) %>
                <% }) %>
            </ul>
        </div>

        <div class="msg">
            <form>
                <input type="text" placeholder="Type your message here..." id="currMsg" autocomplete="off">
                <button type="submit">Send</button>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io("https://zappy-3.onrender.com", {
            withCredentials: true
        });

        let peerConnection;
        let localStream = null;
        let remoteStream = null;
        let mySocketId = null;
        let targetSocketId = null;
        let isInitiator = false;
        let pendingCandidates = [];
        let remoteDescSet = false;
        let callInProgress = false;

        const roomName = "<%= user1.fname %>";
        const currentUser = "<%= user1.fname %>";
        const targetUser = "<%= user2.fname %>";

        socket.on("connect", () => {
            mySocketId = socket.id;
            console.log("My socket ID:", mySocketId);
        });

        socket.emit("join room", "<%= user1.fname %>");

        socket.emit("register-user", {
            room: roomName,
            name: "<%= user1.fname %>",
        });

        socket.emit("get target id", "<%= user2.fname %>");

        let targetCheckInterval = setInterval(() => {
            if (!targetSocketId) {
                console.log("üîç Still looking for target user...");
                socket.emit("get target id", "<%= user2.fname %>");
            } else {
                clearInterval(targetCheckInterval);
            }
        }, 5000);

        socket.on("target id", (targetId) => {
            targetSocketId = targetId;
            console.log("Target socket ID:", targetSocketId);

            const statusEl = document.getElementById('connection-status');
            if (!targetId) {
                statusEl.textContent = "User offline";
                statusEl.style.color = '#ef4444';
                showNotification("‚ö†Ô∏è <%= user2.fname %> is not online", 'error');
            } else {
                statusEl.textContent = "Active now";
                statusEl.style.color = 'var(--success)';
                showNotification("‚úÖ <%= user2.fname %> connected", 'success');
                clearInterval(targetCheckInterval);
            }
        });

        console.log("Socket connected:", socket.connected);

        let form = document.querySelector("form");
        let input = document.getElementById("currMsg");
        let messages = document.getElementById("messages");

        form.addEventListener("submit", (e) => {
            e.preventDefault();
            let currentMessage = input.value.trim();
            let currTime = moment().format("hh:mm A");

            if (currentMessage !== "") {
                socket.emit("chat message", {
                    content: currentMessage,
                    sender: "<%= user1.fname %>",
                    reciever: "<%= user2.fname %>"
                });
                input.value = "";
            }
        });

        socket.on("chat message", (msg) => {
            console.log(msg);
            let li = document.createElement("li");
            li.className = msg.sender === "<%= user1.fname %>" ? 'sent' : 'received';
            li.innerHTML = `<strong>${msg.sender}</strong>${msg.content}`;
            messages.appendChild(li);
            messages.scrollTop = messages.scrollHeight;
        });

        const pcConfig = {
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                { urls: "stun:stun1.l.google.com:19302" },
                { urls: "stun:stun2.l.google.com:19302" }
            ],
            iceCandidatePoolSize: 10
        };

        function createPeerConnection() {
            console.log("üîß Creating peer connection with config:", pcConfig);

            const pc = new RTCPeerConnection(pcConfig);

            pc.onicecandidate = (event) => {
                console.log("üßä ICE candidate event:", event.candidate);
                if (event.candidate && targetSocketId) {
                    socket.emit("candidate", {
                        candidate: event.candidate,
                        target: targetSocketId
                    });
                }
            };

            pc.onconnectionstatechange = () => {
                console.log("üîó Connection state:", pc.connectionState);
                updateCallStatus(pc.connectionState);
            };

            pc.oniceconnectionstatechange = () => {
                console.log("üßä ICE connection state:", pc.iceConnectionState);
            };

            pc.ontrack = (event) => {
                console.log("üì∫ Received remote track:", event);
                console.log("üì∫ Track kind:", event.track.kind);
                console.log("üì∫ Streams:", event.streams);

                if (event.streams && event.streams.length > 0) {
                    const stream = event.streams[0];
                    console.log("üì∫ Setting remote stream:", stream);

                    const remoteVideo = document.getElementById("remote-video");
                    if (remoteVideo) {
                        remoteVideo.srcObject = stream;
                        remoteVideo.onloadedmetadata = () => {
                            console.log("üì∫ Remote video metadata loaded");
                            remoteVideo.play().catch(e => console.error("Error playing remote video:", e));
                        };
                    }

                    const videoSection = document.getElementById("video-section");
                    const callControls = document.getElementById("call-controls");
                    if (videoSection) videoSection.style.display = "flex";
                    if (callControls) callControls.style.display = "flex";

                    showNotification("üì∫ Remote video connected!", 'success');
                } else {
                    console.warn("‚ö†Ô∏è No streams in track event");
                }
            };

            return pc;
        }

        function updateCallStatus(state) {
            const statusEl = document.getElementById('connection-status');
            switch (state) {
                case 'connected':
                    statusEl.textContent = "In call";
                    statusEl.style.color = 'var(--success)';
                    break;
                case 'connecting':
                    statusEl.textContent = "Connecting call...";
                    statusEl.style.color = 'var(--accent-primary)';
                    break;
                case 'disconnected':
                case 'failed':
                case 'closed':
                    statusEl.textContent = "Call ended";
                    statusEl.style.color = 'var(--text-tertiary)';
                    break;
            }
        }

        async function startCall(audioOnly = false) {
            if (callInProgress) {
                showNotification("üìû Call already in progress", 'info');
                return;
            }

            if (!targetSocketId) {
                showNotification("‚õî Target user not connected!", 'error');
                socket.emit("get target id", targetUser);
                return;
            }

            console.log("üìû Starting call - Audio only:", audioOnly);
            callInProgress = true;

            const constraints = {
                audio: true,
                video: !audioOnly ? {
                    width: { ideal: 1280 },
                    height: { ideal: 720 },
                    frameRate: { ideal: 30 }
                } : false
            };

            try {
                console.log("üé• Requesting user media with constraints:", constraints);
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                console.log("üé• Got local stream:", stream);

                localStream = stream;

                const localVideo = document.getElementById("your-call");
                if (localVideo) {
                    localVideo.srcObject = stream;
                    localVideo.muted = true; 
                }

                document.getElementById("video-section").style.display = "flex";
                document.getElementById("call-controls").style.display = "flex";

                peerConnection = createPeerConnection();

                stream.getTracks().forEach((track) => {
                    console.log("‚ûï Adding track to peer connection:", track.kind);
                    peerConnection.addTrack(track, stream);
                });

                updateCallButtons(true);

                isInitiator = true;
                console.log("üì§ Emitting call-user to:", targetSocketId);
                socket.emit("call-user", { target: targetSocketId });
                showNotification("üìû Calling...", 'success');

            } catch (error) {
                console.error("‚ùå Error accessing media devices:", error);
                showNotification(`‚ùå Media access error: ${error.message}`, 'error');
                callInProgress = false;
                updateCallButtons(false);
            }
        }

        function updateCallButtons(inCall) {
            const audioBtn = document.getElementById("audio");
            const videoBtn = document.getElementById("video");

            if (inCall) {
                audioBtn.classList.add("active");
                videoBtn.classList.add("active");
            } else {
                audioBtn.classList.remove("active");
                videoBtn.classList.remove("active");
            }
        }

        document.getElementById("audio").addEventListener("click", (e) => {
            e.preventDefault();
            startCall(true);
        });

        document.getElementById("video").addEventListener("click", (e) => {
            e.preventDefault();
            startCall(false);
        });

        socket.on("call-user", async ({ target }) => {
            console.log("üìû Received incoming call from:", target);
            targetSocketId = target;

            showIncomingCallModal(target);
        });

        function showIncomingCallModal(from) {
            const modal = document.getElementById('call-modal');
            modal.style.display = 'flex';

            showNotification("üìû Incoming call...", 'info');
        }

        function hideIncomingCallModal() {
            const modal = document.getElementById('call-modal');
            modal.style.display = 'none';
        }

        document.getElementById('accept-call').addEventListener('click', async () => {
            console.log("‚úÖ Call accepted");
            hideIncomingCallModal();

            try {
                const constraints = {
                    audio: true,
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        frameRate: { ideal: 30 }
                    }
                };

                console.log("üé• Getting user media for incoming call...");
                const stream = await navigator.mediaDevices.getUserMedia(constraints);

                localStream = stream;
                callInProgress = true;

                const localVideo = document.getElementById("your-call");
                if (localVideo) {
                    localVideo.srcObject = stream;
                    localVideo.muted = true;
                }

                document.getElementById("video-section").style.display = "flex";
                document.getElementById("call-controls").style.display = "flex";

                if (!peerConnection) {
                    peerConnection = createPeerConnection();
                }

                stream.getTracks().forEach((track) => {
                    console.log("‚ûï Adding track to peer connection:", track.kind);
                    peerConnection.addTrack(track, stream);
                });

                updateCallButtons(true);
                isInitiator = false;

                console.log("üì§ Sending ready signal to caller");
                socket.emit("ready", { from: mySocketId });
                showNotification("üìû Call accepted", 'success');

            } catch (error) {
                console.error("‚ùå Error accepting call:", error);
                showNotification(`‚ùå Could not accept call: ${error.message}`, 'error');
                hideIncomingCallModal();
            }
        });

        document.getElementById('reject-call').addEventListener('click', () => {
            console.log("‚ùå Call rejected");
            hideIncomingCallModal();
            socket.emit("call-rejected", { target: targetSocketId });
            showNotification("üìû Call rejected", 'info');
        });

        socket.on("call-rejected", () => {
            console.log("‚ùå Call was rejected by remote user");
            endCall();
            showNotification("üìû Call rejected by user", 'info');
        });

        socket.on("ready", async ({ from }) => {
            console.log("‚úÖ Received ready from", from);

            if (isInitiator && peerConnection) {
                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);
                    socket.emit("offer", {
                        offer,
                        target: targetSocketId,
                        from: mySocketId
                    });
                } catch (error) {
                    console.error("‚ùå Error creating offer:", error);
                }
            }
        });

        socket.on("offer", async ({ offer, from }) => {
            console.log("üì© Received offer from", from);
            targetSocketId = from;

            if (peerConnection) {
                try {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                    remoteDescSet = true;

                    for (const candidate of pendingCandidates) {
                        try {
                            await peerConnection.addIceCandidate(candidate);
                        } catch (err) {
                            console.error("‚ùå Error adding queued ICE candidate:", err);
                        }
                    }
                    pendingCandidates = [];

                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    socket.emit("answer", { answer, target: from });
                } catch (error) {
                    console.error("‚ùå Error processing offer:", error);
                }
            }
        });

        socket.on("answer", async ({ answer, from }) => {
            console.log("üì© Received answer from:", from);
            if (peerConnection) {
                try {
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
                    remoteDescSet = true;

                    for (const candidate of pendingCandidates) {
                        try {
                            await peerConnection.addIceCandidate(candidate);
                        } catch (err) {
                            console.error("‚ùå Error adding queued ICE candidate:", err);
                        }
                    }
                    pendingCandidates = [];
                } catch (error) {
                    console.error("‚ùå Error processing answer:", error);
                }
            }
        });

        socket.on("candidate", async ({ candidate, from }) => {
            console.log("üì© Received ICE candidate from:", from);
            if (peerConnection && candidate) {
                try {
                    const iceCandidate = new RTCIceCandidate(candidate);
                    if (remoteDescSet) {
                        await peerConnection.addIceCandidate(iceCandidate);
                    } else {
                        pendingCandidates.push(iceCandidate);
                    }
                } catch (error) {
                    console.error("‚ùå Error processing ICE candidate:", error);
                }
            }
        });

        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        function endCall() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            if (remoteStream) {
                remoteStream.getTracks().forEach(track => track.stop());
                remoteStream = null;
            }
            document.getElementById("video-section").style.display = "none";
            document.getElementById("call-controls").style.display = "none";
            isInitiator = false;
            remoteDescSet = false;
            pendingCandidates = [];
            callInProgress = false;
            updateCallButtons(false);
        }

        const endCallBtn = document.getElementById("end-call");
        if (endCallBtn) {
            endCallBtn.addEventListener("click", () => {
                endCall();
                socket.emit("call-ended", { target: targetSocketId });
            });
        }

        socket.on("call-ended", () => {
            endCall();
            showNotification("üìû Call ended", 'info');
        });

        window.addEventListener("beforeunload", () => {
            endCall();
            socket.disconnect();
        });
    </script>
</body>

</html>