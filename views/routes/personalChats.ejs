<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Chat - Real-time Messaging</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
        integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    :root {
        --bg-primary: #f7f7f8;
        --bg-secondary: #ffffff;
        --bg-tertiary: #f0f0f2;
        --border-light: #e5e5e7;
        --border-medium: #d1d1d6;
        --text-primary: #2b2d31;
        --text-secondary: #5c5f66;
        --text-tertiary: #8e9297;
        --accent-primary: #d97706;
        --accent-hover: #b45309;
        --accent-light: #fed7aa;
        --accent-bg: #fff7ed;
        --success: #059669;
        --success-bg: #ecfdf5;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
        --radius-sm: 6px;
        --radius-md: 8px;
        --radius-lg: 12px;
        --radius-xl: 16px;
        --radius-2xl: 24px;
    }

    body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: linear-gradient(135deg, var(--bg-primary) 0%, #faf9f5 100%);
        color: var(--text-primary);
        line-height: 1.6;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        margin: 0;
        padding: 0;
        overflow: hidden;
        height: 100vh;
    }

    /* Video Container */
    .video-container {
        position: fixed;
        top: 2rem;
        left: 2rem;
        right: 2rem;
        height: 200px;
        display: none;
        gap: 1rem;
        z-index: 1000;
        animation: slideInDown 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-100px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    #your-call,
    #remote-video {
        flex: 1;
        height: 100%;
        border-radius: var(--radius-xl);
        object-fit: cover;
        box-shadow: var(--shadow-lg);
        border: 2px solid var(--bg-secondary);
        transition: transform 0.3s ease;
        background: #000;
    }

    #your-call {
        transform: scaleX(-1); /* Mirror local video */
    }

    #your-call:hover,
    #remote-video:hover {
        transform: scale(1.02);
    }

    /* Chat Window */
    .chat-window {
        width: min(900px, 90vw);
        height: min(700px, 85vh);
        margin: 0;
        padding: 0;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        position: absolute;
        border-radius: var(--radius-2xl);
        overflow: hidden;
        background: var(--bg-secondary);
        border: 1px solid var(--border-light);
        box-shadow: var(--shadow-lg);
        backdrop-filter: blur(12px);
        display: flex;
        flex-direction: column;
        animation: slideInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translate(-50%, -40%) scale(0.95);
        }

        to {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }
    }

    /* Header */
    .header {
        background: var(--bg-secondary);
        padding: 1.5rem 2rem;
        border-bottom: 1px solid var(--border-light);
        display: flex;
        align-items: center;
        justify-content: space-between;
        backdrop-filter: blur(12px);
    }

    .about-receiver {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .user-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--accent-primary), var(--accent-hover));
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 1.125rem;
        box-shadow: var(--shadow-md);
    }

    .user-info h1 {
        font-size: 1.375rem;
        font-weight: 700;
        color: var(--text-primary);
        margin: 0;
        letter-spacing: -0.02em;
    }

    .user-status {
        font-size: 0.875rem;
        color: var(--text-tertiary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 0.25rem;
    }

    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: var(--success);
        animation: pulse 2s infinite;
    }

    @keyframes pulse {

        0%,
        100% {
            opacity: 1;
            transform: scale(1);
        }

        50% {
            opacity: 0.8;
            transform: scale(1.2);
        }
    }

    .features {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .feature-btn {
        width: 48px;
        height: 48px;
        border: none;
        border-radius: var(--radius-lg);
        background: var(--bg-tertiary);
        color: var(--text-secondary);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        text-decoration: none;
    }

    .feature-btn:hover {
        background: var(--accent-primary);
        color: white;
        transform: translateY(-2px) scale(1.05);
        box-shadow: var(--shadow-md);
    }

    .feature-btn:active {
        transform: translateY(0) scale(0.95);
    }

    .feature-btn i {
        font-size: 1.25rem;
    }

    .feature-btn.active {
        background: var(--accent-primary);
        color: white;
    }

    .chattings {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem 2rem;
        background: linear-gradient(135deg, rgba(247, 247, 248, 0.5) 0%, rgba(255, 255, 255, 0.8) 100%);
    }

    .chattings::-webkit-scrollbar {
        width: 6px;
    }

    .chattings::-webkit-scrollbar-track {
        background: transparent;
    }

    .chattings::-webkit-scrollbar-thumb {
        background: var(--border-medium);
        border-radius: 10px;
    }

    .chattings::-webkit-scrollbar-thumb:hover {
        background: var(--text-tertiary);
    }

    #messages {
        list-style: none;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    #messages p {
        text-align: center;
        color: var(--text-tertiary);
        font-size: 0.8125rem;
        font-weight: 500;
        margin: 1.5rem 0;
        position: relative;
    }

    #messages p::before,
    #messages p::after {
        content: '';
        position: absolute;
        top: 50%;
        width: 20%;
        height: 1px;
        background: var(--border-light);
    }

    #messages p::before {
        left: 0;
    }

    #messages p::after {
        right: 0;
    }

    #messages li {
        padding: 0.875rem 1.25rem;
        border-radius: var(--radius-lg);
        font-size: 0.9375rem;
        line-height: 1.5;
        max-width: 75%;
        animation: messageSlide 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        word-wrap: break-word;
    }

    #messages li.sent {
        background: linear-gradient(135deg, var(--accent-primary), var(--accent-hover));
        color: white;
        align-self: flex-end;
        margin-left: auto;
    }

    #messages li.received {
        background: var(--bg-tertiary);
        color: var(--text-primary);
        align-self: flex-start;
        border: 1px solid var(--border-light);
        margin-right: auto;
    }

    #messages li strong {
        font-size: 0.8125rem;
        margin-bottom: 0.25rem;
        display: block;
    }

    #messages li.sent strong {
        color: rgba(255, 255, 255, 0.8);
    }

    #messages li.received strong {
        color: var(--text-secondary);
    }

    .msg {
        padding: 1.5rem 2rem;
        background: var(--bg-secondary);
        border-top: 1px solid var(--border-light);
    }

    .msg form {
        display: flex;
        gap: 1rem;
        align-items: center;
    }

    .msg form input {
        flex: 1;
        padding: 1rem 1.5rem;
        border: 1px solid var(--border-light);
        border-radius: var(--radius-xl);
        font-size: 1rem;
        background: var(--bg-tertiary);
        color: var(--text-primary);
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        outline: none;
    }

    .msg form input:focus {
        border-color: var(--accent-primary);
        background: var(--bg-secondary);
        box-shadow: 0 0 0 3px rgba(217, 119, 6, 0.1);
    }

    .msg form input::placeholder {
        color: var(--text-tertiary);
    }

    .msg form button {
        padding: 1rem 2rem;
        background: linear-gradient(135deg, var(--accent-primary), var(--accent-hover));
        color: white;
        border: none;
        border-radius: var(--radius-xl);
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: var(--shadow-sm);
        letter-spacing: -0.01em;
        min-width: 100px;
    }

    .msg form button:hover {
        background: linear-gradient(135deg, var(--accent-hover), #92400e);
        box-shadow: var(--shadow-md);
        transform: translateY(-1px);
    }

    .msg form button:active {
        transform: translateY(0);
    }

    .call-controls {
        position: absolute;
        bottom: 1rem;
        left: 50%;
        transform: translateX(-50%);
        display: none;
        gap: 1rem;
        z-index: 1001;
    }

    .call-controls button {
        width: 50px;
        height: 50px;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        font-size: 1.25rem;
    }

    .call-controls .end-call {
        background: #ef4444;
        color: white;
    }

    .call-controls .end-call:hover {
        background: #dc2626;
    }

    @media (max-width: 768px) {
        .chat-window {
            width: 95vw;
            height: 90vh;
            border-radius: var(--radius-xl);
        }

        .header {
            padding: 1rem 1.5rem;
        }

        .user-info h1 {
            font-size: 1.125rem;
        }

        .chattings {
            padding: 1rem 1.5rem;
        }

        .msg {
            padding: 1rem 1.5rem;
        }

        .msg form {
            gap: 0.75rem;
        }

        .msg form input {
            padding: 0.875rem 1.25rem;
            font-size: 0.9375rem;
        }

        .msg form button {
            padding: 0.875rem 1.5rem;
            min-width: 80px;
        }

        .video-container {
            top: 1rem;
            left: 1rem;
            right: 1rem;
            height: 150px;
        }

        .feature-btn {
            width: 40px;
            height: 40px;
        }

        .feature-btn i {
            font-size: 1rem;
        }
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }

    .notification {
        position: fixed;
        top: 2rem;
        right: 2rem;
        background: var(--bg-secondary);
        border: 1px solid var(--border-light);
        border-radius: var(--radius-lg);
        padding: 1rem 1.5rem;
        box-shadow: var(--shadow-lg);
        z-index: 1001;
        animation: slideInRight 0.3s ease-out;
        max-width: 300px;
    }

    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .notification.success {
        border-left: 4px solid var(--success);
    }

    .notification.error {
        border-left: 4px solid #ef4444;
    }

    .notification.info {
        border-left: 4px solid #3b82f6;
    }

    /* Call Accept/Reject Modal */
    .call-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 2000;
        animation: fadeIn 0.3s ease-out;
    }

    .call-modal-content {
        background: var(--bg-secondary);
        border-radius: var(--radius-2xl);
        padding: 2rem;
        text-align: center;
        box-shadow: var(--shadow-lg);
        max-width: 400px;
        width: 90%;
        animation: scaleIn 0.3s ease-out;
    }

    @keyframes scaleIn {
        from {
            opacity: 0;
            transform: scale(0.9);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .call-modal h2 {
        color: var(--text-primary);
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }

    .call-modal p {
        color: var(--text-secondary);
        margin-bottom: 2rem;
        font-size: 1rem;
    }

    .call-modal-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    .call-modal button {
        width: 60px;
        height: 60px;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        transition: all 0.2s ease;
    }

    .accept-call {
        background: var(--success);
        color: white;
    }

    .accept-call:hover {
        background: #047857;
        transform: scale(1.1);
    }

    .reject-call {
        background: #ef4444;
        color: white;
    }

    .reject-call:hover {
        background: #dc2626;
        transform: scale(1.1);
    }
</style>

<body>
    <div class="call-modal" id="call-modal">
        <div class="call-modal-content">
            <h2>📞 Incoming Call</h2>
            <p><%= user2.fname %> is calling you...</p>
            <div class="call-modal-buttons">
                <button class="accept-call" id="accept-call" title="Accept Call">
                    <i class="fa-solid fa-phone"></i>
                </button>
                <button class="reject-call" id="reject-call" title="Reject Call">
                    <i class="fa-solid fa-phone-slash"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="video-container" id="video-section">
        <video id="your-call" autoplay playsinline muted></video>
        <video id="remote-video" autoplay playsinline></video>
    </div>

    <div class="call-controls" id="call-controls">
        <button class="end-call" id="end-call" title="End Call">
            <i class="fa-solid fa-phone-slash"></i>
        </button>
    </div>

    <div class="chat-window">
        <div class="header">
            <div class="about-receiver">
                <div class="user-avatar">
                    <%= user2.fname.charAt(0).toUpperCase() %>
                </div>
                <div class="user-info">
                    <h1>
                        <%= user2.fname %>
                    </h1>
                    <div class="user-status">
                        <div class="status-dot"></div>
                        <span id="connection-status">Connecting...</span>
                    </div>
                </div>
            </div>
            <div class="features">
                <button class="feature-btn" id="audio" title="Voice Call">
                    <i class="fa-solid fa-phone"></i>
                </button>
                <button class="feature-btn" id="video" title="Video Call">
                    <i class="fa-solid fa-video"></i>
                </button>
            </div>
        </div>

        <div class="chattings">
            <ul id="messages">
                <% sortedChats.forEach((subChat)=>{ %>
                    <p>
                        <%= subChat[0].date %>
                    </p>
                    <% subChat.forEach((chat)=>{ %>
                        <li class="<%= chat.sender === user1.fname ? 'sent' : 'received' %>">
                            <strong>
                                <%= chat.sender %>
                            </strong>
                            <%= chat.content %>
                        </li>
                        <% }) %>
                    <% }) %>
            </ul>
        </div>

        <div class="msg">
            <form>
                <input type="text" placeholder="Type your message here..." id="currMsg" autocomplete="off">
                <button type="submit">Send</button>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io("https://zappy-3.onrender.com", {
            withCredentials: true
        });

        let peerConnection;
        let localStream = null;
        let remoteStream = null;
        let mySocketId = null;
        let targetSocketId = null;
        let isInitiator = false;
        let pendingCandidates = [];
        let remoteDescSet = false;
        let callInProgress = false;

        const roomName = "<%= user1.fname %>";
        const currentUser = "<%= user1.fname %>";
        const targetUser = "<%= user2.fname %>";

        socket.on("connect", () => {
            mySocketId = socket.id;
            console.log("My socket ID:", mySocketId);
        });

        socket.emit("join room", "<%= user1.fname %>");

        socket.emit("register-user", {
            room: roomName,
            name: "<%= user1.fname %>",
        });

        socket.emit("get target id", "<%= user2.fname %>");

        let targetCheckInterval = setInterval(() => {
            if (!targetSocketId) {
                console.log("🔍 Still looking for target user...");
                socket.emit("get target id", "<%= user2.fname %>");
            } else {
                clearInterval(targetCheckInterval);
            }
        }, 5000);
        
        socket.on("target id", (targetId) => {
            targetSocketId = targetId;
            console.log("Target socket ID:", targetSocketId);
            
            const statusEl = document.getElementById('connection-status');
            if (!targetId) {
                statusEl.textContent = "User offline";
                statusEl.style.color = '#ef4444';
                showNotification("⚠️ Target user is not online", 'error');
            } else {
                statusEl.textContent = "Active now";
                statusEl.style.color = 'var(--success)';
                showNotification("✅ User connected", 'success');
                clearInterval(targetCheckInterval);
            }
        });

        console.log("Socket connected:", socket.connected);

        let form = document.querySelector("form");
        let input = document.getElementById("currMsg");
        let messages = document.getElementById("messages");

        form.addEventListener("submit", (e) => {
            e.preventDefault();
            let currentMessage = input.value.trim();
            let currTime = moment().format("hh:mm A");

            if (currentMessage !== "") {
                socket.emit("chat message", {
                    content: currentMessage,
                    sender: "<%= user1.fname %>",
                    reciever: "<%= user2.fname %>"
                });
                input.value = "";
            }
        });

        socket.on("chat message", (msg) => {
            console.log(msg);
            let li = document.createElement("li");
            li.className = msg.sender === "<%= user1.fname %>" ? 'sent' : 'received';
            li.innerHTML = `<strong>${msg.sender}</strong>${msg.content}`;
            messages.appendChild(li);
            messages.scrollTop = messages.scrollHeight;
        });

        // WebRTC Configuration
        const pcConfig = {
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                { urls: "stun:stun1.l.google.com:19302" },
                { urls: "stun:stun2.l.google.com:19302" },
                { urls: "stun:stun3.l.google.com:19302" },
                { urls: "stun:stun4.l.google.com:19302" }
            ],
            iceCandidatePoolSize: 10
        };

        function createPeerConnection() {
            console.log("🔧 Creating peer connection with config:", pcConfig);
            
            const pc = new RTCPeerConnection(pcConfig);

            // Handle ICE candidates
            pc.onicecandidate = (event) => {
                console.log("🧊 ICE candidate event:", event.candidate);
                if (event.candidate && targetSocketId) {
                    socket.emit("candidate", {
                        candidate: event.candidate,
                        target: targetSocketId
                    });
                }
            };

            // Handle connection state changes
            pc.onconnectionstatechange = () => {
                console.log("🔗 Connection state:", pc.connectionState);
                updateCallStatus(pc.connectionState);
            };

            pc.oniceconnectionstatechange = () => {
                console.log("🧊 ICE connection state:", pc.iceConnectionState);
            };

            // Handle incoming tracks - THIS IS CRUCIAL
            pc.ontrack = (event) => {
                console.log("📺 Received remote track:", event);
                console.log("📺 Track kind:", event.track.kind);
                console.log("📺 Track readyState:", event.track.readyState);
                console.log("📺 Streams count:", event.streams.length);

                if (event.streams && event.streams.length > 0) {
                    const stream = event.streams[0];
                    console.log("📺 Remote stream tracks:", stream.getTracks().length);
                    
                    const remoteVideo = document.getElementById("remote-video");
                    if (remoteVideo) {
                        // Force set the stream
                        remoteVideo.srcObject = stream;
                        
                        // Add event listeners
                        remoteVideo.onloadedmetadata = () => {
                            console.log("📺 Remote video metadata loaded, playing...");
                            remoteVideo.play().catch(e => {
                                console.error("Error playing remote video:", e);
                                // Try to play with user interaction
                                document.addEventListener('click', () => {
                                    remoteVideo.play().catch(console.error);
                                }, { once: true });
                            });
                        };

                        remoteVideo.oncanplay = () => {
                            console.log("📺 Remote video can play");
                        };

                        remoteVideo.onplaying = () => {
                            console.log("📺 Remote video is playing!");
                            showNotification("📺 Remote video connected!", 'success');
                        };

                        // Force play attempt
                        setTimeout(() => {
                            if (remoteVideo.paused) {
                                console.log("📺 Attempting to play remote video...");
                                remoteVideo.play().catch(console.error);
                            }
                        }, 1000);
                    }

                    // Ensure video container is visible
                    const videoSection = document.getElementById("video-section");
                    const callControls = document.getElementById("call-controls");
                    if (videoSection) videoSection.style.display = "flex";
                    if (callControls) callControls.style.display = "flex";
                } else {
                    console.warn("⚠️ No streams in track event");
                    // Try to get stream directly from track
                    const remoteVideo = document.getElementById("remote-video");
                    if (remoteVideo && !remoteVideo.srcObject) {
                        const newStream = new MediaStream([event.track]);
                        remoteVideo.srcObject = newStream;
                        console.log("📺 Created new stream for remote video");
                    }
                }
            };

            return pc;
        }

        function updateCallStatus(state) {
            const statusEl = document.getElementById('connection-status');
            switch (state) {
                case 'connected':
                    statusEl.textContent = "In call";
                    statusEl.style.color = 'var(--success)';
                    break;
                case 'connecting':
                    statusEl.textContent = "Connecting call...";
                    statusEl.style.color = 'var(--accent-primary)';
                    break;
                case 'disconnected':
                case 'failed':
                case 'closed':
                    statusEl.textContent = "Call ended";
                    statusEl.style.color = 'var(--text-tertiary)';
                    break;
            }
        }

        // Start call function
        async function startCall(audioOnly = false) {
            if (callInProgress) {
                showNotification("📞 Call already in progress", 'info');
                return;
            }

            if (!targetSocketId) {
                showNotification("⛔ Target user not connected!", 'error');
                socket.emit("get target id", targetUser);
                return;
            }

            console.log("📞 Starting call - Audio only:", audioOnly);
            callInProgress = true;

            const constraints = {
                audio: true,
                video: !audioOnly ? {
                    width: { ideal: 1280 },
                    height: { ideal: 720 },
                    frameRate: { ideal: 30 }
                } : false
            };

            try {
                console.log("🎥 Requesting user media with constraints:", constraints);
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                console.log("🎥 Got local stream:", stream);

                localStream = stream;
                
                // Set up local video
                const localVideo = document.getElementById("your-call");
                if (localVideo) {
                    localVideo.srcObject = stream;
                    localVideo.muted = true; // Always mute local video to prevent feedback
                    // Ensure local video plays
                    localVideo.play().catch(e => console.error("Error playing local video:", e));
                }

                // Show video container
                document.getElementById("video-section").style.display = "flex";
                document.getElementById("call-controls").style.display = "flex";

                // Create peer connection
                peerConnection = createPeerConnection();

                // Add local stream tracks to peer connection
                stream.getTracks().forEach((track) => {
                    console.log("➕ Adding track to peer connection:", track.kind);
                    peerConnection.addTrack(track, stream);
                });

                // Set button states
                updateCallButtons(true);

                isInitiator = true;
                console.log("📤 Emitting call-user to:", targetSocketId);
                socket.emit("call-user", { target: targetSocketId });
                showNotification("📞 Calling...", 'success');

            } catch (error) {
                console.error("❌ Error accessing media devices:", error);
                showNotification(`❌ Media access error: ${error.message}`, 'error');
                callInProgress = false;
                updateCallButtons(false);
            }
        }

        function updateCallButtons(inCall) {
            const audioBtn = document.getElementById("audio");
            const videoBtn = document.getElementById("video");
            
            if (inCall) {
                audioBtn.classList.add("active");
                videoBtn.classList.add("active");
            } else {
                audioBtn.classList.remove("active");
                videoBtn.classList.remove("active");
            }
        }

        // Call button event listeners
        document.getElementById("audio").addEventListener("click", (e) => {
            e.preventDefault();
            startCall(true);
        });

        document.getElementById("video").addEventListener("click", (e) => {
            e.preventDefault();
            startCall(false);
        });

        socket.on("call-user", async ({ target }) => {
            console.log("📞 Received incoming call from:", target);
            targetSocketId = target;
            
            // Show call modal for user to accept/reject
            showIncomingCallModal(target);
        });

        function showIncomingCallModal(from) {
            const modal = document.getElementById('call-modal');
            modal.style.display = 'flex';
            
            // Play notification sound (optional)
            showNotification("📞 Incoming call...", 'info');
        }

        function hideIncomingCallModal() {
            const modal = document.getElementById('call-modal');
            modal.style.display = 'none';
        }

        // Accept call button
        document.getElementById('accept-call').addEventListener('click', async () => {
            console.log("✅ Call accepted");
            hideIncomingCallModal();
            
            try {
                const constraints = {
                    audio: true,
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        frameRate: { ideal: 30 }
                    }
                };

                console.log("🎥 Getting user media for incoming call...");
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                
                localStream = stream;
                callInProgress = true;
                
                // Set up local video
                const localVideo = document.getElementById("your-call");
                if (localVideo) {
                    localVideo.srcObject = stream;
                    localVideo.muted = false; // Don't mute - we want audio!
                    localVideo.play().catch(e => console.error("Error playing local video:", e));
                }

                // Show video container
                document.getElementById("video-section").style.display = "flex";
                document.getElementById("call-controls").style.display = "flex";

                // Create peer connection
                if (!peerConnection) {
                    peerConnection = createPeerConnection();
                }

                // Add local stream tracks
                stream.getTracks().forEach((track) => {
                    console.log("➕ Adding track to peer connection:", track.kind);
                    peerConnection.addTrack(track, stream);
                });

                updateCallButtons(true);
                isInitiator = false;
                
                console.log("📤 Sending ready signal to caller");
                socket.emit("ready", { from: mySocketId });
                showNotification("📞 Call accepted", 'success');
                
            } catch (error) {
                console.error("❌ Error accepting call:", error);
                showNotification(`❌ Could not accept call: ${error.message}`, 'error');
                hideIncomingCallModal();
            }
        });

        // Reject call button
        document.getElementById('reject-call').addEventListener('click', () => {
            console.log("❌ Call rejected");
            hideIncomingCallModal();
            socket.emit("call-rejected", { target: targetSocketId });
            showNotification("📞 Call rejected", 'info');
        });

        socket.on("call-rejected", () => {
            console.log("❌ Call was rejected by remote user");
            endCall();
            showNotification("📞 Call rejected by user", 'info');
        });

        socket.on("ready", async ({ from }) => {
            console.log("✅ Received ready from", from);

            if (isInitiator && peerConnection) {
                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);
                    socket.emit("offer", {
                        offer,
                        target: targetSocketId,
                        from: mySocketId
                    });
                } catch (error) {
                    console.error("❌ Error creating offer:", error);
                }
            }
        });

        socket.on("offer", async ({ offer, from }) => {
            console.log("📩 Received offer from", from);
            targetSocketId = from;

            if (peerConnection) {
                try {
                    console.log("📩 Setting remote description...");
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                    remoteDescSet = true;
                    console.log("✅ Remote description set successfully");
                    
                    // Process any pending ICE candidates
                    console.log(`📩 Processing ${pendingCandidates.length} pending candidates`);
                    for (const candidate of pendingCandidates) {
                        try {
                            await peerConnection.addIceCandidate(candidate);
                            console.log("✅ Added pending ICE candidate");
                        } catch (err) {
                            console.error("❌ Error adding queued ICE candidate:", err);
                        }
                    }
                    pendingCandidates = [];
                    
                    console.log("📤 Creating answer...");
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    console.log("📤 Sending answer to caller");
                    socket.emit("answer", { answer, target: from });
                } catch (error) {
                    console.error("❌ Error processing offer:", error);
                }
            } else {
                console.error("❌ No peer connection when processing offer");
            }
        });

        socket.on("answer", async ({ answer, from }) => {
            console.log("📩 Received answer from:", from);
            if (peerConnection) {
                try {
                    console.log("📩 Setting remote description from answer...");
                    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
                    remoteDescSet = true;
                    console.log("✅ Remote description set from answer");

                    console.log(`📩 Processing ${pendingCandidates.length} pending candidates`);
                    for (const candidate of pendingCandidates) {
                        try {
                            await peerConnection.addIceCandidate(candidate);
                            console.log("✅ Added pending ICE candidate");
                        } catch (err) {
                            console.error("❌ Error adding queued ICE candidate:", err);
                        }
                    }
                    pendingCandidates = [];
                    console.log("🎉 WebRTC connection should be establishing...");
                } catch (error) {
                    console.error("❌ Error processing answer:", error);
                }
            } else {
                console.error("❌ No peer connection when processing answer");
            }
        });

        socket.on("candidate", async ({ candidate, from }) => {
            console.log("📩 Received ICE candidate from:", from);
            if (peerConnection && candidate) {
                try {
                    const iceCandidate = new RTCIceCandidate(candidate);
                    if (remoteDescSet) {
                        await peerConnection.addIceCandidate(iceCandidate);
                    } else {
                        pendingCandidates.push(iceCandidate);
                    }
                } catch (error) {
                    console.error("❌ Error processing ICE candidate:", error);
                }
            }
        });

        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        function endCall() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            if (remoteStream) {
                remoteStream.getTracks().forEach(track => track.stop());
                remoteStream = null;
            }
            document.getElementById("video-section").style.display = "none";
            document.getElementById("call-controls").style.display = "none";
            isInitiator = false;
            remoteDescSet = false;
            pendingCandidates = [];
            callInProgress = false;
            updateCallButtons(false);
        }

        const endCallBtn = document.getElementById("end-call");
        if (endCallBtn) {
            endCallBtn.addEventListener("click", () => {
                endCall();
                socket.emit("call-ended", { target: targetSocketId });
            });
        }

        socket.on("call-ended", () => {
            endCall();
            showNotification("📞 Call ended", 'info');
        });

        window.addEventListener("beforeunload", () => {
            endCall();
            socket.disconnect();
        });
    </script>
</body>
</html>