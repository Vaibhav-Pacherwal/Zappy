<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        .chat-window {
            width: 80%;
            height: 80%;
            margin: 2px;
            padding: 0.5rem;
            left: 50%;
            top: 50%;
            transform: translate(-50%,-50%);
            position: absolute;
            overflow-y: auto;
            border: 2px solid black;
            border-radius: 12px;
            overflow: hidden;
        }
        .chat-window::-webkit-scrollbar {
            display: none;
        }
        .chat-window .msg{
            width: 100%;
            bottom: 1.7rem;
            position: absolute;
        }
        .chat-window form input {
            width: 70%;
            padding: 1rem;
            border: 2px solid black;
            font-size: 1rem;
            border-radius: 12px;
            display: flex;
            flex-direction: column;
        }
         .chat-window .msg form {
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 0.5rem;
         }
        .chat-window form button {
            background-color: black;
            color: white;
            padding: 1rem;
            font-size: 1.1rem;
            font-weight: 600;
            border: none;
            border-radius: 12px;
        }
        .header {
            width: 100%;
            height: 2.5rem;
            display: flex;
            padding: 10px 0 10px 0;
            border-bottom: 2px solid black;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .header .features {
            display: flex;
            gap: 1rem;
            padding: 0 10px 0 10px;
        }
        .header .features img {
            cursor: pointer;
        }
        .header .about-reciever {
            padding: 0 10px 0 10px;
            display: flex;
            flex-direction: column;
            flex-wrap: wrap;
        }
        .chattings {
            width: 100%;
            height: 75.5%;
            overflow-y: auto;
        }
        .chattings::-webkit-scrollbar {
            display: none;
        }
        #your-call, #remote-video {
            width: 40%;
            height: auto;
            border-radius: 10px;
            margin: 10px;
        }
        .video-container {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            justify-content: center;
        }
    </style>
    <body>
        <div class="video-container" id="video-section" style="display: none;">
            <video id="your-call" autoplay playsinline></video>
            <video id="remote-video" autoplay playsinline></video>
        </div>

        <div class="chat-window">
            <div class="header">
                <div class="about-reciever">
                    <h1><strong><%= user2.fname %></strong></h1>
                </div>
                <div class="features">
                    <a href="#" id="audio"><i class="fa-solid fa-phone-volume" style="color: #000000; font-size: 1.5rem;"></i></a>
                    <a href="#" id="video"><i class="fa-solid fa-video" style="color: #000000; font-size: 1.5rem;"></i></a>
                </div>
            </div>
            <div class="chattings">
                <ul id="messages">
                <% sortedChats.forEach((subChat)=>{ %>
                    <p style="text-align: center;"><%= subChat[0].date %></p>
                    <% subChat.forEach((chat)=>{ %>
                        <li>
                            <%= chat.sender %>: <%= chat.content %>(<%= chat.sendAt %>)
                        </li>
                    <% }) %>
                <% }) %>
            </ul>
            </div>
            <div class="msg">
                <form action="">
                    <input type="text" placeholder="Type Your Message Here....." id="currMsg">
                    <button>SEND</button>
                </form>
            </div>
        </div>
    </body>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io("https://zappy-2.onrender.com", {
            withCredentials: true
        });
        let peerConnection;
        let isReady = false;
        let localStream = null;
        let mySocketId = null;
        let targetSocketId = null;
        let isInitiator = false;
        let remoteStream = null;
        const roomName = "<%= user1.fname %>";
        let pendingCandidates = [];
        let remoteDescSet = false;

        socket.on("connect", () => {
            mySocketId = socket.id;
            console.log("My socket ID:", mySocketId);
        });

        socket.emit("join room", "<%= user1.fname %>"); 

        socket.emit("register-user", {
            room: roomName,
            name: "<%= user1.fname %>", 
        });

        socket.emit("get target id", "<%= user2.fname %>");

        socket.on("target id", (targetId) => {
            targetSocketId = targetId;
            console.log("Target socket ID:", targetSocketId);
        });

        console.log("Socket connected:", socket.connected);

        let form = document.querySelector("form");
        let input = document.getElementById("currMsg");
        let messages = document.getElementById("messages");

        form.addEventListener("submit", (e) => {
            e.preventDefault();
            let currentMessage = input.value.trim();
            let currTime = moment().format("hh:mm A");

            if (currentMessage !== "") {
                socket.emit("chat message", {
                    content: currentMessage,
                    sender: "<%= user1.fname %>",
                    reciever: "<%= user2.fname %>",
                    time: currTime
                });
                input.value = "";
            }
        });

        socket.on("chat message", (msg) => {
            console.log(msg);
            let li = document.createElement("li");
            li.innerText = `${msg.sender}: ${msg.content}(${msg.time})`;
            messages.appendChild(li);
            messages.scrollTop = messages.scrollHeight;
        });

        document.getElementById("audio").addEventListener("click", (e) => {
            e.preventDefault();
            startCall(true);
        });

        document.getElementById("video").addEventListener("click", (e) => {
            e.preventDefault();
            startCall(false);
        });

        async function startCall(audioOnly = false) {
            if (!targetSocketId) {
                alert("⛔ Target user not connected yet!");
                return;
            }

            const constraints = audioOnly
                ? { audio: true, video: false }
                : { audio: true, video: true };

            try {
                const stream = await navigator.mediaDevices.getUserMedia(constraints);

                document.getElementById("your-call").srcObject = stream;
                document.getElementById("video-section").style.display = "flex";

                localStream = stream;
                peerConnection = createPeerConnection();

                localStream.getTracks().forEach((track) => {
                    peerConnection.addTrack(track, localStream);
                });

                if (targetSocketId === mySocketId) {
                    console.warn("🚫 You're calling yourself! Aborting call...");
                    return;
                }

                isInitiator = true;
                socket.emit("call-user", { target: targetSocketId });
                socket.emit("ready", { from: mySocketId });
            } catch (error) {
                console.error("❌ Error accessing media devices.", error);
            }
        }

        function createPeerConnection() {
            const pc = new RTCPeerConnection({
                iceServers: [
                    { urls: "stun:stun.l.google.com:19302" }
                ]
            });

            pc.onicecandidate = (event) => {
                if (event.candidate) {
                    socket.emit("candidate", {
                        candidate: event.candidate,
                        target: targetSocketId
                    });
                }
            };

            if (!remoteStream) remoteStream = new MediaStream();

            pc.ontrack = (event) => {
                console.log("📺 Received remote track");
                event.streams[0].getTracks().forEach((track) => {
                    remoteStream.addTrack(track);
                });

                const remoteVideo = document.getElementById("remote-video");
                if (remoteVideo.srcObject !== remoteStream) {
                    remoteVideo.srcObject = remoteStream;
                }

                document.getElementById("video-section").style.display = "flex";
            };

            return pc;
        }

        socket.on("call-user", ({ target }) => {
            console.log("📞 Received call-user from", target);
            targetSocketId = target;
            isInitiator = false;
        });

        socket.on("ready", async ({ from }) => {
            console.log("✅ Received ready from", from);

            if (isInitiator && peerConnection) {
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                socket.emit("offer", {
                    offer,
                    target: targetSocketId,
                    from: mySocketId
                });
            }
        });

        socket.on("offer", async ({ offer, from }) => {
            console.log("📩 Received offer from", from);
            targetSocketId = from;

            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
                document.getElementById("your-call").srcObject = stream;
                document.getElementById("video-section").style.display = "flex";
                localStream = stream;

                if (!peerConnection) {
                    peerConnection = createPeerConnection();
                }

                localStream.getTracks().forEach((track) => {
                    peerConnection.addTrack(track, localStream);
                });

                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                remoteDescSet = true;
                for (const candidate of pendingCandidates) {
                    try {
                        await peerConnection.addIceCandidate(candidate);
                    } catch (err) {
                        console.error("❌ Error adding queued ICE candidate:", err);
                    }
                }
                pendingCandidates = [];
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                socket.emit("answer", { answer, target: from });
            } catch (error) {
                console.error("❌ Error accessing media devices on receiving offer", error);
            }
        });

        socket.on("answer", async ({ answer }) => {
            console.log("📩 Received answer");
            if (peerConnection) {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
                remoteDescSet = true;

            for (const candidate of pendingCandidates) {
                try {
                    await peerConnection.addIceCandidate(candidate);
                } catch (err) {
                    console.error("❌ Error adding queued ICE candidate:", err);
                }
            }
            pendingCandidates = [];
                        }
        });

        socket.on("candidate", async ({ candidate }) => {
            if (peerConnection) {
                const iceCandidate = new RTCIceCandidate(candidate);
                if (remoteDescSet) {
                    await peerConnection.addIceCandidate(iceCandidate);
                } else {
                    pendingCandidates.push(iceCandidate);
                }
            }
        });

        window.addEventListener("beforeunload", () => {
            if (peerConnection) peerConnection.close();
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
            }
            socket.disconnect();
        });
    </script>
</html>